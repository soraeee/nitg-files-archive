<ActorFrame
InitCommand="%function(self)

	nitg_version = FUCK_EXE and tonumber(GAMESTATE:GetVersionDate()) >= 20180617 --NotITG version number to check for, v3 by default
	
	if not nitg_version then
		SCREENMAN:SystemMessage('Outdated version of NotITG detected, mods will not work');
	end
	
	songName = GAMESTATE:GetCurrentSong():GetSongDir();
	
	m_bl = 60/145 --use this to define length of a beat for use in the rest of the song
	sw = SCREEN_WIDTH
	sh = SCREEN_HEIGHT --shortcuts
	scx = SCREEN_CENTER_X
	scy = SCREEN_CENTER_Y
	
	function Plr(pn)
		return _G['P'..pn]
	end
	
	upsh_slumpage = false 
	
	if GAMESTATE:GetCurrentSteps(0):GetDifficulty()==5 or GAMESTATE:GetCurrentSteps(1):GetDifficulty()==5 then --Thanks Kay Pooma (again)
		upsh_slumpage = true
	end
	
end"
><children><ActorFrame Condition="nitg_version"
OnCommand="%function(self)
	nvidia = false
	alphamult = 1
	if string.find(string.lower(PREFSMAN:GetPreference('LastSeenVideoDriver')), 'nvidia') or string.find(string.lower(DISPLAY:GetVendor()),'nvidia') then
		Trace('NVidia graphics driver detected.')
		Trace('AFT multiplier set to 0.9')
		nvidia = true
		alphamult = 0.9
	end
	if not string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'opengl')
	or string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'd3d')
	and string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'opengl') 
	and string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'd3d') < 
	string.find(string.lower(PREFSMAN:GetPreference('VideoRenderers')), 'opengl') then
		SCREENMAN:SystemMessage('D3D Video Renderer detected. Expect textures to fail.');
	end
end"
><children>

	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="sleep,1000"
	/>
	
	<Layer File="modhelpers" />
	<Layer File="easing" />	
	<Layer File="spellcards" />
	<Layer File="c2l" />
	
	<Layer
		Type="Quad"
		OnCommand="hidden,1"
		InitCommand="%function(self)
		
			checked = false;
		
			---------------------------------------------------------
			---------DOCUMENTATION-----------------------------------
			---------------------------------------------------------
			
			--function perframe( beat, endBeat )
				--return true if the current beat is between 'beat' and 'endBeat'
			
			--function mod_shader(beat,key,which)
				--turn on shader key at specified beat (up to 10 keys available, defined by 'which' = 0-9
				
			--function mod_insert(beat,len,mod,len_or_end,pn)
				--insert mod into beat mods table
			--function mod_insert2(time,len,mod,len_or_end,pn)
				--insert mod into time mods table
			--function mod_ease(beat, len, start_strength, end_strength, mod, len_or_end, ease_type, pn, sustain, opt1, opt2)
				--insert mod into ease mods table
			--function mod_perframe(start, end, function(beat, deltatime))
				--insert function into perframe reader
				
			--function mod_message(beat,msg,persistent)
				--insert something into the actions table.
				--msg can also be a function. If string, a message gets broadcast at that beat
				--if 'persistent' is true, message will run even if editor starts at a beat past it
				
			--function mod_blacklist(t,n)
				--check if number n occurs in table t
				--useful for doing 'every beat EXCEPT the contents of t'
				
			--function simple_m0d(beat,strength,mult,mod)
			--function simple_m0d2(beat,strength,mult,mod,pn)
			--function simple_m0d3(beat,strength,duration,bpm,mod,pn)
				--activate mods at specific beat but also deactivate them
				
			--function mod_wiggle(beat,num,div,amt,speed,mod,pn,first)
				--alternates a mod back and forth before resetting to 0
				
			--function mod_spring(beat,strength,num,mod,pn)
				--like mod_wiggle, but springier
			
			--function mod_springt(time,strength,dur,mod,pn)
				--time-based per-frame alternating mod that decreases based on how much time is left.
					--think doorstopper
			
			--function mod_springt2(time,strength,dur,mod,pn)
				--time-based per-frame alternating mod
			
			--function mod_spring_adjustable(beat,strength,num,period,mod,pn, first)
				--it's not very good
			
			--function mod_beat(beat,strength,pn)
				--turns on beat for the beat specified, at the desired strength	
			
			--function switcheroo_add(beat,which,speed,len,pn)
				--adds a column swap at the desired beat
			--[[	switcheroos = {normal = {0,0}, ldur = {0,0}, reset = {0,0},
					flip = {100,0}, rudl = {100,0}, invert = {0,100}, dlru = {0,100},
					ludr = {25,-75}, rdul = {75,75}, drlu = {25,125}, ulrd = {75,-125}, urld = {100,-100}}
			]]
			
			--function mod_sugarkiller(beat,duration,speed,minstealth,maxstealth,pn)
				--portable version of the effect from sugarkill X
			
			--NEW**
			--function sugaroo_add(beat,len,speed,stealthvalmain,stealthvalsec,pn)
				--a version of mod_sugarkiller stoken from Daikyi that actually works !
				
			--function mod_bounce(beat,length,start,apex,mod,ease_type,pn)
			--function func_bounce(beat,length,start,apex,function,ease_type)
				--eases out from start to apex, then eases back in from apex to start
				--ease_type should be a string, i.e. 'Quad', 'Cubic', 'Circ'
			
			
			
			--function modulo(a, b)
				--returns the remainder when a is divided by b, works properly with negatives unlike math.mod
			
			--function randomXD(t)
				--returns a pseudo-random number between 0 and 1 seeded based on the given argument
				--returns 0.5 if t is 0 (useful sometimes!)
			
			--function hidecol(beat,len,col,which,pn)
				--stealth + dark + hidenoteflashes per column, insta-activate with normal modstrings
				
			--function hideease(beat,len,col,which,ease,sus,pn)
				--hidecol but with eases
				
			--function SpawnPlayers(beat,lower,upper,which,persist)
				--stolen from hal
				--lower/upper is player numbers
				--which: 'spawn'/'despawn'
				--persist should probably be true
			---------------------------------------------------------
			--------END DOCUMENTATION--------------------------------
			---------------------------------------------------------
			
			
			
			
			
			
			
			
			
			init_modsp1 = '';
			init_modsp2 = '';
			
			mod_plr = {};
			
			mod_firstSeenBeat = GAMESTATE:GetSongBeat(); --necessary to prevent long freezes
			
			
---------------------------------------------------------------------------------------
----------------------Begin tables 'n stuff--------------------------------------------
---------------------------------------------------------------------------------------

			--beat based mods
			--{beat_start, beat_end, mods, len_or_end, player_number}
			mods = {
				{0,9999,'*2 1.8x, *-1 overhead, *-1 approachtype, *-1 dizzyholds, *-1 stealthpastreceptors, *-1 modtimer','end'},
			}
			
			--beat-based ease mods
			--{beat_start, beat_end, mod_start, mod_end, mod/function, len_or_end, ease_type, player_number, sustainbeats, optional_param1, optional_param2}
			--valid ease types are:
				--linear
				--inQuad    outQuad    inOutQuad    outInQuad
				--inCubic   outCubic   inOutCubic   outInCubic
				--inQuart   outQuart   inOutQuart   outInQuart
				--inQuint   outQuint   inOutQuint   outInQuint
				--inSine    outSine    inOutSine    outInSine
				--inExpo    outExpo    inOutExpo    outInExpo
				--inCirc    outCirc    inOutCirc    outInCirc
				--inElastic outElastic inOutElastic outInElastic    --can take 2 optional parameters - amplitude & period
				--inBack    outBack    inOutBack    outInBack       --can take 1 optional parameter  - spring amount
				--inBounce  outBounce  inOutBounce  outInBounce
				
			mods_ease = {
				-- EXAMPLE TWEEN: from beat 0 to 4, make rotationz go from 360 to 0 with the inOutBack tween
				--{0, 4, 360, 0, 'rotationz', 'len', inOutBack},
				
				-- EXAMPLE TWEEN: from beat 4 to 8, rotate topscreen from 360 to 0 with the outBack tween
				--{4, 4, 360, 0, function(a) SCREENMAN:GetTopScreen():rotationz(a) end, 'len', outBack},
			}
			
			--time based mods
			mod_time = 0;
			--{time_start, time_end, mods, len_or_end, player_number}
			mods2 = {
			}
			
			-- you can now write perframe stuff without having to scroll down!
			-- {beat_start,beat_end,function(beat,deltatime)}
			mod_perframes = {
				--{18,24,function(beat,deltatime)
					-- do stuff every frame from beat 18-24
					-- print(beat,deltatime)
				--end},
			}
			
			--this is both a message broadcaster and a function runner
			--if you put {beat,'String'}, then 'String' is broadcast as a message on that beat
			--if you put {beat,function() somecode end}, then function() is run at that beat
			--see example on beat 0
			
			curaction = 1;
			--{beat,thing,persists}
			mod_actions = {
				{0,'GetProxy',true},
				{0,function()
					for pn=1,2 do
						local a = Plr(pn)
						if a then
							a:GetChild('Judgment'):hidden(1)
							a:GetChild('Combo'):hidden(1)
							a:SetFarDist(10000)
						end
					end
					
					for pn=1,2 do
						local d = 0.25; if pn == 2 then d = 0.75 end
						local b = _G['jud'..pn..'p']
						if b then
							b:hidden(0);
							b:basezoomx(0.75);
							b:basezoomy(0.75);
							b:x(SCREEN_WIDTH*d)
							b:y(SCREEN_HEIGHT*0.5)
						end
						local c = _G['com'..pn..'p']
						if c then
							c:hidden(0);
							c:basezoomx(0.75);
							c:basezoomy(0.75);
							c:x(SCREEN_WIDTH*d)
							c:y(SCREEN_HEIGHT*0.5)
						end
					end
					GAMESTATE:ForceSmoothLines(0);
				end,true},
			}
			
---------------------------------------------------------------------------------------
--***              	   begin Real Shit          	    		                  ***--
---------------------------------------------------------------------------------------
			local me,mb,m,mm,mpf,lb = mod_ease,mod_bounce,mod_insert,mod_message,mod_perframe,legacy_bounce
			
			m(0,999,'*-1 250 zoomz, *-1 100 sudden, *-1 200 suddenoffset, *-1 150 drawsize','end')		
			
			if upsh_slumpage == true then
				mm(0,function() if upsh_tile1 then upsh_tile1:diffuse(168/255,50/255,50/255,0) upsh_arrow:diffuse(168/255,50/255,50/255,0) upsh_arrow2:diffuse(168/255,50/255,50/255,0) end end,true)
			end
			
			me(1.5,2.5,628*2,0,'confusionzoffset','len',inQuad)
			me(1.5,2.5,0,-1000,'tiny','len',inCubic)
			me(1.5,2.5,0,50,'flip','len',inCubic)
			me(1.5,2.5,0,200,'movey','len',inCubic,nil,28)
			
			me(1.5,2.5,0,0.5,function(a) if upsh_tile1 then upsh_tile1:diffusealpha(a) end end,'len',inExpo)
			me(4,2,0.5,1,function(a) if upsh_tile1 then upsh_tile1:diffusealpha(a) end end,'len',outExpo)
			mm(6,function() if upsh_tile1 then upsh_tile1:diffusealpha(1) end end,true)
			
			me(1.5,2.5,scx*0.5,scx,function(a) if Plr(1) then Plr(1):x(a) end end,'len',inCubic)
			me(1.5,2.5,scx*1.5,scx,function(a) if Plr(2) then Plr(2):x(a) end end,'len',inCubic)
			
			mm(4,function() for pn = 1,2 do if Plr(pn) then Plr(pn):x(scx) end end end,true)
			me(4,2,-1000,0,'tiny','len',outExpo)
			me(4,2,50,0,'flip','len',outExpo)
			
			for i,v in ipairs(wee_nis) do
				for c = 0,3 do
					for pn = 1,2 do --oh god we're going deeper
						local m = (pn%2)*2-1
						if v[3] == 2 then --ouch !!!!!
							mb(v[1],v[3],0,randomXD(pn*c/(v[1]*4))*250*m,'movex'..c,outExpo,inCubic,pn)
							mb(v[1],v[3],0,randomXD(pn*c/(v[1]*4))*250*m,'movez'..c,outExpo,inCubic,pn)
							
							mb(v[1]+2,v[3],0,randomXD(pn*c/((v[1]+v[3])*4))*250*m,'movex'..c,outExpo,inCubic,pn)
							mb(v[1]+2,v[3],0,randomXD(pn*c/((v[1]+v[3])*4))*250*m,'movez'..c,outExpo,inCubic,pn)						
						else						
							mb(v[1],v[3],0,randomXD(pn*c/(v[1]*4))*250*m,'movex'..c,outExpo,inCubic,pn) --is this random enough
							mb(v[1],v[3],0,randomXD(pn*c/(v[1]*4))*250*m,'movez'..c,outExpo,inCubic,pn) --no !
						end
					end
				end
				
				if v[3] > 2 then
					me(v[1],v[3],360*v[2],0,'rotationy','len',outCubic)
					me(v[1],v[3],-628*v[2],0,'confusionyoffset','len',outCubic)
				else --ouch!
					me(v[1],v[3],0,180*v[2],'rotationy','len',outQuad)
					me(v[1],v[3],0,-314*v[2],'confusionyoffset','len',outQuad)
					
					me(v[1]+v[3],v[3],180*v[2],368*v[2],'rotationy','len',outQuad)
					me(v[1]+v[3],v[3],-314*v[2],-628*v[2],'confusionyoffset','len',outQuad)
				end
				
				mb(v[1],v[3],0,10,'rotationz',outExpo,inOutQuad)
				if v[3] == 2 then -- i should probably not have this many if statements					
					mb(v[1]+2,2,0,10,'rotationz',outExpo,inOutQuad)
				end
				
				if v[1] > 6 then
					me(v[1],1,-300,0,'tiny','len',outCubic)
				end
			end
			
			me(32,4,200,0,'movey','len',inOutCirc)
			
			me(36,1,0,0,'rotationy','len',linear)
			me(36,1,0,0,'confusionyoffset','len',linear)
			me(36,1,-50,0,'tiny','len',outCubic) --how to hide shitty transition resets 101
			
			for i = 36,60,8 do -- fuck
				mb(i,3,0,-150,'movex',outExpo,outExpo)
				mb(i,3,0,-30,'rotationy',outExpo,outExpo)
				mb(i+3,3,0,150,'movex',outExpo,outExpo)
				mb(i+3,3,0,30,'rotationy',outExpo,outExpo)
				
				for c = 0,3 do
					local m = (c%2)*2-1
					for j = 0,3 do --is this even necessary ????? my brain is a Sphere
						local d = (j%2)*2-1 --ok i guess it is!
						mb(i+1.5*j,1.5,0,50*m*d,'movey'..c,outCubic,outCubic)
						--mb(i+1.5*j,1.5,0,-900*m*d,'tinyz'..c,outCubic,outCubic)
						mb(i+0.75+1.5*j,1.5,0,100,'flip',outCubic,outCubic)
						me(i+0.75+1.5*j,1.5,-100,0,'tinyx','len',outCubic)
					end
				end
				
				local a = (((i-4)/8)%2)*2-1 --is this enough variables yet
				if i < 60 then
					me(i+6,2,360*a,0,'rotationx','len',inOutCubic)
					me(i+6,2,-628*a,0,'confusionxoffset','len',inOutCubic)
				end
				for c = 0,3 do
					if a == -1 then
						me(i+6+c/4,2,0,99.9,'reverse'..c,'len',inOutCubic,nil,8)
					else				
						me(i+6+c/4,2,99.9,0,'reverse'..c,'len',inOutCubic)
					end
				end
			end
			
			for i = 36,66,2 do
				me(i+1,1,-200,0,'tiny','len',outCubic)
			end
			for i,v in ipairs(kinkl) do
				for i = 0,24,8 do
					if v[2] == 0 then
						me(v[1]+i,0.75,-30,0,'confusionzoffset','len',outCubic)
					elseif v[2] == 1 then
						me(v[1]+i,0.75,30,0,'confusionzoffset','len',outCubic)
					else
						for c = 0,3 do --i just forgot how to code and i could have optimized this so much by putting it in a previous loop
							me(v[1]+i+c/4,0.25,-250,0,'tinyy','len',outCubic)
						end
					end
					me(v[1]+i,0.75,20,0,'brake','len',outCubic)
					me(v[1]+i,0.75,0,20,'boost','len',outCubic)
				end
			end
			
			me(67,1,1,0,function(a) if upsh_tile1 then upsh_tile1:diffusealpha(a) end end,'len',inOutCubic)
			
			me(67,1,100,250,'zoomx','len',outExpo)
			mb(67,2,0,-50,'rotationx',outExpo,outExpo)
			me(68,1,250,10,'zoomx','len',outExpo)
			me(68,1,100,10,'zoomy','len',outExpo)
			
			mm(68,function() if upsh_tile1 then upsh_grad:diffusealpha(0) upsh_tile1:y(scy) end end,true)
			
			me(69,92,10,100,'zoom','end',linear)
			m(69,92,'*-1 1000000000000 drunkspeed','end')
			m(92,94,'*-1 no drunkspeed','end')
			for i = 68,78,2 do
				local m = ((i/2)%2)*2-1
				local d = (-(78-i)*5)-30 --????????????????????????????? this somehow was the exact value i needed
				mb(i+1,2,0,-5000,'tinyz',outElastic,outExpo)
				mb(i+1,2,0,100*m,'drunk',outElastic,outExpo)
				mb(i+1,2,0,50*m,'tipsy',outElastic,outExpo)
				mb(i+1,2,0,100,'flip',outElastic,outExpo)
				
				mm(i+1,function() if upsh_tile1 then upsh_tile1:rotationx(d) end end,true)
				
				me(i+1,1,0,1,function(a) if upsh_tile1 then upsh_tile1:diffusealpha(a) end end,'len',outCubic)
				me(i+2,1,1,0,function(a) if upsh_tile1 then upsh_tile1:diffusealpha(a) end end,'len',outCubic)
			end
			mb(83,2,0,-3000,'tinyz',outElastic,outExpo)
			mb(83,2,0,100,'drunk',outElastic,outExpo)
			mb(83,2,0,50,'tipsy',outElastic,outExpo)
			mb(83,2,0,100,'flip',outElastic,outExpo)
			
			me(83,1,0,1,function(a) if upsh_tile1 then upsh_tile1:diffusealpha(a) end end,'len',outCubic)
			me(84,1,1,0,function(a) if upsh_tile1 then upsh_tile1:diffusealpha(a) end end,'len',outCubic)
			
			for i = 84,91 do
				mb(i,1,0,100,'invert',outElastic,outExpo)
			end
			mb(81,1,0,50,'skewx',outCubic,inExpo)
			mb(81,1,0,-40,'noteskewx',outCubic,inExpo)
			--mb(81,1,0,-70,'skewy',outCubic,inExpo)
			mb(81,1,0,-30,'rotationy',outCubic,inExpo)
			
			mb(82,1,0,-50,'skewx',outCubic,inOutExpo)
			mb(82,1,0,40,'noteskewx',outCubic,inOutExpo)
			--mb(82,1,0,70,'skewy',outCubic,inOutExpo)
			mb(82,1,0,30,'rotationy',outCubic,inOutExpo)
			
			me(84,8,-360*5,0,'rotationx','len',inCubic)
			me(84,8,628*5,0,'confusionxoffset','len',inCubic)
			
			me(84,8,0,500,'drunkz','len',inQuad)
			--me(84,8,0,-50,'reverse','len',inQuad)
			me(84,8,0,100,'tornado','len',inQuad)
			me(84,8,0,200,'gayholds','len',inQuad) --YEAHYEAHYEAHYEAHYEAHYEAHYEAHYEAHYEAHYEAHYEAHYEAHYEAHYEAH
			
			me(92,4,-360*2,0,'rotationx','len',outCubic)
			me(92,4,628*2,0,'confusionxoffset','len',outCubic)
			me(92,4,500,0,'drunkz','len',outCubic)
			
			--when the arrow
			mm(92,function() if upsh_arrow then upsh_arrow:diffusealpha(.5) upsh_arrow:zoom(0) upsh_arrow2:diffusealpha(.5) upsh_arrow2:zoom(.75) end end,true)
			me(92,4,0,0.75,function(a) if upsh_arrow then upsh_arrow:zoom(a) end end,'len',outExpo)
			me(92,4,360+180,180,function(a) if upsh_arrow then upsh_arrow:rotationz(a) end end,'len',outBack) --Math
			
			me(96,1,-360,-270,function(a) if upsh_arrow then upsh_arrow:rotationz(a) end end,'len',outBack)
			me(97,1,-270,-180,function(a) if upsh_arrow then upsh_arrow:rotationz(a) end end,'len',outBack)
			me(98,1,-180,-90,function(a) if upsh_arrow then upsh_arrow:rotationz(a) end end,'len',outBack)
			me(99,1,-90,0,function(a) if upsh_arrow then upsh_arrow:rotationz(a) end end,'len',outBack)
			
			for i = 96,99 do
				me(i,1,1.5,.75,function(a) if upsh_arrow then upsh_arrow:zoom(a) end end,'len',outCubic)
			end
			--me(100,1,0,180,function(a) if upsh_arrow then upsh_arrow:rotationz(a) end end,'len',outExpo)
			
			--HELP
			for i,v in ipairs(wordstext) do
				local v = v --thank u ky dashiel
				me(v[1]-0.5,v[4]+0.5,scy+400,scy-400,function(a) if upsh_fgcock then _G['upsh_text_'..v[2]]:y(a) end end,'len',outInCubic)
				mm(100,function() if upsh_fgcock then _G['upsh_text_'..v[2]]:y(scy-1000) end end,true)
			end
			
			--when you steal code from future is dead
			function upsh_vibro(beat,magnitude)
				me(beat,1.5,magnitude,0,function(a)
					for pn = 1,2 do
						local b = Plr(pn)
						if b then
							b:vibrate(1)
							b:effectmagnitude(a,a/2,0)
						end
					end
				end,'len',outSine)
			end
			
			for pn = 1,2 do
				local m = (pn%2)*2-1
				mb(96,1,0,30*m,'rotationy',outExpo,inCubic,pn)
				mb(97,1,0,-30*m,'rotationy',outExpo,inCubic,pn)
				mb(98,1,0,30*m,'rotationy',outExpo,inCubic,pn)				
			end
			
			mb(96,1,0,-30,'rotationx',outExpo,inCubic)
			mb(97,1,0,30,'rotationx',outExpo,inCubic)
			mb(98,1,0,-30,'rotationx',outExpo,inCubic)
			mb(99,1,0,50,'rotationx',outExpo,inCubic)			
			
			local mult2point5 = 1 --naming conventions:tm:
			for i = 96,98 do
				mb(i,1,0,150*mult2point5,'tipsy',outExpo,inCubic)
				mult2point5 = -mult2point5
				me(i,1,1,0,function(a) if upsh_tile1 then upsh_tile1:diffusealpha(a) end end,'len',outCubic)
			end
			me(99,1,0,1,function(a) if upsh_tile1 then upsh_tile1:diffusealpha(a) end end,'len',outCubic)
			
			mb(99,1,100,200,'zoomx',outExpo,inOutCubic)
			me(100,1,0,100,'invert','len',outCubic)
			
			local mult1 = 1
			local mult2 = 1
			for i = 96,99 do
				me(i,1,scx*mult1,scx*(mult1-0.1),function(a) if Plr(1) then Plr(1):x(a) end end,'len',outBack,nil,nil,3)
				me(i,1,scx*mult2,scx*(mult2+0.1),function(a) if Plr(2) then Plr(2):x(a) end end,'len',outBack,nil,nil,3)
				
				mult1 = mult1-0.1
				mult2 = mult2+0.1
			end			
			
			local mult3 = 1
			for i,v in ipairs(potato) do
				local b = 50
				if v[2] == 1 then b = 25 end
				upsh_vibro(v[1],b)
				mb(v[1],2,0,-b*mult3,'rotationx',outExpo,outCubic)
				mb(v[1],2,250,800,'zoomz',outExpo,outCubic)
				
				mult3 = -mult3
			end
			
			local mult4 = 1
			for i,v in ipairs({103,110,135,142}) do
				m(v,1,'*-1 '.. (314*3*mult4) ..' confusion','len')
				m(v+1,1,'*-1 no confusion','len')
				mult4 = -mult4
			end
			
			--we are backsphere
			for i = 100,124,4 do
				mb(i+1,2,100,0,'invert',outCubic,inCubic)					
				mb(i+3,2,100,0,'invert',outCubic,inCubic)	
				
				me(i,1,500,-500,'parabolaz','len',outExpo,nil,1)
				me(i,1,30,0,'brake','len',outExpo,nil,1)
				me(i+2,1,-500,500,'parabolaz','len',outExpo,nil,1)
				me(i+2,1,0,30,'brake','len',outExpo,nil,1)
			end
			me(129,1,100,0,'invert','len',outExpo,nil,2)
			for i = 100,126,2 do --fuck !
				mb(i,1,0,40,'movey0',outCubic,inCubic)
				mb(i,1,0,-40,'movey1',outCubic,inCubic)
				mb(i,1,0,-40,'movey2',outCubic,inCubic)
				mb(i,1,0,40,'movey3',outCubic,inCubic)
				
				mb(i+1,1,0,-40,'movey0',outCubic,inCubic)
				mb(i+1,1,0,40,'movey1',outCubic,inCubic)
				mb(i+1,1,0,40,'movey2',outCubic,inCubic)
				mb(i+1,1,0,-40,'movey3',outCubic,inCubic)
			end
			
			
			for i = 100,155 do --tiny/bg accents
				me(i,1,-200,0,'tiny','len',outExpo)
				me(i,1,21,20,function(a) if upsh_tile1 then upsh_tile1:zoom(a) end end,'len',outCubic)
				me(i,2,1,.75,function(a) if upsh_arrow then upsh_arrow:zoom(a) upsh_arrow2:zoom(a) end end,'len',outExpo)
			end
			for i = 100,148,16 do
				for c = 0,3 do
					me(i,1,0,99.9,'reverse'..c,'len',outExpo,nil,7)
					me(i+8,1,99.9,0,'reverse'..c,'len',outExpo)
					
					me(i,2,scy,scy-500,function(a) if upsh_arrow then upsh_arrow:y(a) end end,'len',outExpo)
					me(i,2,scy+500,scy,function(a) if upsh_arrow2 then upsh_arrow2:y(a) end end,'len',outExpo)
					me(i,2,0,180,function(a) if upsh_arrow then upsh_arrow:rotationz(a) upsh_arrow2:rotationz(a) end end,'len',outExpo)
					
					
					if i < 148 then
						me(i+8,2,scy-500,scy,function(a) if upsh_arrow then upsh_arrow:y(a) end end,'len',outExpo)
						me(i+8,2,scy,scy+500,function(a) if upsh_arrow2 then upsh_arrow2:y(a) end end,'len',outExpo)
						me(i+8,2,180,360,function(a) if upsh_arrow then upsh_arrow:rotationz(a) upsh_arrow2:rotationz(a) end end,'len',outExpo)
					end
				end
			end
				
			
			local mult5 = 1 --are you done yet
			for i,v in ipairs({118,118.75,119.5,122,122.75,123.5}) do
				me(v,0.75,50*mult5,0,'rotationy','len',outSine)
				me(v,0.75,-87.2*mult5,0,'confusionyoffset','len',outSine)
				me(v,0.75,-200,0,'tinyx','len',outSine)
				me(v,0.75,-800,0,'tinyz','len',outSine)
				mult5 = -mult5
			end
			
			local mult6 = 1 --no
			for i = 124,127 do
				me(i,1,-30*mult6,0,'skewx','len',inQuad)
				me(i,1,-314,0,'confusionzoffset','len',outQuad)
				mult6 = -mult6
			end
			mb(114,2,0,-4000,'tinyz',outCubic,outExpo)
			
			m(129,999,'*-1 3000 arrowpathsize, *-1 150 arrowpathdrawsizeback','end')
			mm(129,function()
				for pn = 1,2 do
					if _G['P'..pn] then
						for c = 0,3 do
							_G['P'..pn]:SetNumPathGradientPoints(c,4)
							_G['P'..pn]:SetPathGradientPoint(0,c,-8)
							_G['P'..pn]:SetPathGradientPoint(1,c,2)
							_G['P'..pn]:SetPathGradientPoint(2,c,6)
							_G['P'..pn]:SetPathGradientPoint(3,c,8)
							if c%2 == 1 then
								_G['P'..pn]:SetPathGradientColor(0,c,1,1,1,0)
								_G['P'..pn]:SetPathGradientColor(1,c,97/255,176/255,1,1)
								_G['P'..pn]:SetPathGradientColor(2,c,1,1,1,1)
								_G['P'..pn]:SetPathGradientColor(3,c,1,1,1,0)
							else
								_G['P'..pn]:SetPathGradientColor(0,c,1,1,1,0)
								_G['P'..pn]:SetPathGradientColor(1,c,1,173/255,97/255,1)
								_G['P'..pn]:SetPathGradientColor(2,c,1,1,1,1)
								_G['P'..pn]:SetPathGradientColor(3,c,1,1,1,0)
							end
						end
					end
				end
			end,true)
			for c = 0,3 do
				me(129+c/4,1,100,0,'arrowpath'..c,'len',outCubic,1)
				me(130+c/4,1,100,0,'arrowpath'..c,'len',outCubic,2)
			end
			
			me(131,1,-30,30,function(a) if upsh_tile1 then upsh_tile1:rotationx(a) end end,'len',inOutCubic)
			me(131,1,0.2,-0.2,function(a) if upsh_tile1 then upsh_tile1:texcoordvelocity(0,a,0) end end,'len',inOutCubic)
			mb(131,2,100,170,'zoomy',outExpo,outElastic)
			mb(131,2,100,50,'zoomx',outExpo,outElastic)
			
			for i,v in ipairs(wordstext2) do
				local v = v --thank u ky dashiel 2
				me(v[1]-0.5,v[4]+0.5,scy-400,scy+400,function(a) if upsh_fgcock then _G['upsh_text_'..v[2]]:y(a) end end,'len',outInCubic)
				mm(129,function() if upsh_fgcock then _G['upsh_text_'..v[2]]:y(scy-1000) end end,true)
			end
			
			--we are backsphere 2: electric boogaloo on wheels reloaded deluxe 9000 (new funky mode)
			for i = 132,152,4 do
				mb(i+1,2,100,0,'invert',outCubic,inCubic)					
				mb(i+3,2,100,0,'invert',outCubic,inCubic)	
				
				me(i,1,500,-500,'parabolaz','len',outExpo,nil,1)
				me(i,1,30,0,'brake','len',outExpo,nil,1)
				me(i,1,20,0,'dizzy','len',outQuad,nil,1)
				me(i+2,1,-500,500,'parabolaz','len',outExpo,nil,1)
				me(i+2,1,0,30,'brake','len',outExpo,nil,1)
				me(i+2,1,-20,0,'dizzy','len',outQuad,nil,1)
			end
			me(157,1,100,0,'invert','len',outExpo,nil,2)
			for i = 132,154,2 do --fuck 2!
				mb(i,1,0,40,'movey0',outCubic,inCubic)
				mb(i,1,0,-40,'movey1',outCubic,inCubic)
				mb(i,1,0,40,'movey2',outCubic,inCubic)
				mb(i,1,0,-40,'movey3',outCubic,inCubic)
				
				mb(i+1,1,0,-40,'movey0',outCubic,inCubic)
				mb(i+1,1,0,40,'movey1',outCubic,inCubic)
				mb(i+1,1,0,-40,'movey2',outCubic,inCubic)
				mb(i+1,1,0,40,'movey3',outCubic,inCubic)
			end
			
			for i,v in ipairs({150,150.75,151.5,154,154.75,155.5}) do
				me(v,0.75,50*mult5,0,'rotationy','len',outSine)
				me(v,0.75,-87.2*mult5,0,'confusionyoffset','len',outSine)
				me(v,0.75,-200,0,'tinyx','len',outSine)
				me(v,0.75,-800,0,'tinyz','len',outSine)
				mult5 = -mult5
			end
			
			me(156,4,360*4,0,'rotationy','len',inExpo)
			me(156,4,-628*4,0,'confusionyoffset','len',inExpo)
			me(156,4,0,500,'drunkz','len',inQuad)
			me(156,4,0,100,'tornado','len',inQuad)
			me(156,4,0,200,'gayholds','len',inQuad) --YEAHYEAHYEAHYEAHYEAHYEAHYEAHYEAHYEAHYEAHYEAHYEAHYEAHYEAH
			
			me(156,4,360*3,0,function(a) if upsh_arrow then upsh_arrow:rotationy(a) upsh_arrow2:rotationy(a)end end,'len',inExpo)		
			me(160,4,360*2,0,function(a) if upsh_arrow then upsh_arrow:rotationy(a) upsh_arrow2:rotationy(a)end end,'len',outExpo)
			
			me(156,8,.75,2,function(a) if upsh_arrow then upsh_arrow:zoom(a) upsh_arrow2:zoom(a)end end,'len',inOutExpo)
			me(160,4,.5,0,function(a) if upsh_arrow then upsh_arrow:diffusealpha(a) upsh_arrow2:diffusealpha(a) end end,'len',outQuad)
			me(160,4,1,0,function(a) if upsh_tile1 then upsh_tile1:diffusealpha(a) end end,'len',outQuad)
			
			me(156,4,scx*0.5,scx,function(a) if Plr(1) then Plr(1):x(a) end end,'len',inOutExpo)
			me(156,4,scx*1.5,scx,function(a) if Plr(2) then Plr(2):x(a) end end,'len',inOutExpo)
			
			me(160,4,360*3,0,'rotationy','len',outCubic)
			me(160,4,-628*3,0,'confusionyoffset','len',outCubic)
			
			me(162,2,0,50,'flip','len',inCubic)
			me(162,2,0,50,'reverse','len',inCubic)
			me(162,2,0,-2000,'tiny','len',inCubic)
			
			me(164,2,50,0,'flip','len',outExpo)
			me(164,2,50,0,'reverse','len',outExpo)
			me(164,2,-1000,0,'tiny','len',outExpo)
			
			--Wenise
			me(163,2,50,100,'dark','len',inOutCubic,nil,1)
			me(163,2,0,100,'stealth','len',inOutCubic,nil,1)
			
			m(164,196,'*-1 1000000000069699 drunkzspeed, *-1 2000 arrowpathsize, *-1 150 arrowpathdrawsizeback, *-1 disablemines','end')
			m(196,197,'*-1 no drunkzspeed','end')
			local mult6 = 1
			for i = 164,192,4 do
				if i > 162 then					
					me(i,2,50,100,'dark','len',inOutExpo)
					me(i,2,20,100,'stealth','len',inOutExpo)
				end				
				me(i+2,2,50,100,'dark','len',inOutExpo)
				me(i+2,2,20,100,'stealth','len',inOutExpo)
				me(i+2,2,100,0,'invert','len',outExpo)
				
				me(i+2,2,500*mult6,0,'tipsy','len',outSine)
				me(i+2,2,50,0,'tiny','len',outSine)
				me(i+2,2,-200,0,'tinyx','len',outExpo)
				
				me(i,2,20,0,'brake','len',inSine)
				me(i,2,0,40,'boost','len',outSine)
				me(i+2,2,50,0,'brake','len',inSine)
				me(i+2,2,0,100,'boost','len',outSine)
				
				me(i,1.5,-400,0,'confusionzoffset','len',outQuad)
				me(i+2,1.5,400,0,'confusionzoffset','len',outQuad)
				
				me(i,1.5,-400,0,'drunkz','len',outQuad)
				me(i+2,1.5,-400,0,'drunkz','len',outQuad)
				for pn = 1,2 do				
					local m = (pn%2)*2-1
					me(i,2,50*m*mult6*(i/128),50*m*mult6*(i/128),'movex','len',linear,pn)
					me(i+2,2,-50*m*mult6*(i/128),-50*m*mult6*(i/128),'movex','len',linear,pn)
					--me(i+2,2,0,0,'movex','len',linear,pn)	
				end
				
				mult6 = -mult6					
			end
			for i = 164,188,8 do --when you steal code from star gazer
				for pn = 1,2 do
					local mu = (pn*2)-2.5
					local wenis = 1
					if i == 188 then wenis = 0.3 end
					m(i,4,'*-1 '..25*mu..' rotationx','len',pn)
					m(i+2,4,'*-1 '..25*mu..' rotationy','len',pn)
					
					m(i+4,4,'*-1 '..-25*mu..' rotationx','len',pn)
					m(i+6,4,'*-1 '..-25*mu*wenis..' rotationy','len',pn)
				end
			end
			
			--taronuke shits
			m(196,228,'*-1 -98 drawsizeback','end')
			mm(196,function() if upsh_tile1 then upsh_tile1:rotationx(-10) upsh_tile1:customtexturerect(0,0,20,20) upsh_arrow:diffusealpha(0.5) upsh_arrow2:diffusealpha(0.5) upsh_arrow2:y(9999) upsh_arrow:x(scx*0.5) upsh_arrow:y(scy) upsh_arrow:rotationz(0) upsh_arrow2:rotationz(0) end end,true)
			me(196,2,25,20,function(a) if upsh_tile1 then upsh_tile1:zoom(a) end end,'len',outExpo)
			me(196,2,0,1,function(a) if upsh_tile1 then upsh_tile1:diffusealpha(a) end end,'len',outExpo)
			me(196,2,0,0.75,function(a) if upsh_arrow then upsh_arrow:zoom(a) end end,'len',outExpo)
			
			for i = 196,216,8 do				
				me(i+2,3,scx*0.5,scx*1.5,function(a) if upsh_arrow then upsh_arrow:x(a) end end,'len',inOutExpo)
				me(i+2,3,-360,180,function(a) if upsh_arrow then upsh_arrow:rotationz(a) end end,'len',inOutExpo)
				me(i+6,3,scx*1.5,scx*0.5,function(a) if upsh_arrow then upsh_arrow:x(a) end end,'len',inOutExpo)
				me(i+6,3,-180,360,function(a) if upsh_arrow then upsh_arrow:rotationz(a) end end,'len',inOutExpo)
			end
			
			me(224,3,scx*0.5,scx,function(a) if upsh_arrow then upsh_arrow:x(a) end end,'len',inOutExpo)
			me(224,3,0,-360-180,function(a) if upsh_arrow then upsh_arrow:rotationz(a) end end,'len',inOutExpo)
			
			for i = 196,208,4 do
				me(i,3,0.5,0,function(a) if upsh_gradorange then upsh_gradorange:diffusealpha(a) end end,'len',outSine)
				me(i+2,3,0.5,0,function(a) if upsh_gradblue then upsh_gradblue:diffusealpha(a) end end,'len',outSine)
			end
			for i = 212,220,4 do
				me(i,3,1,0,function(a) if upsh_gradorange then upsh_gradorange:diffusealpha(a) end end,'len',outSine)
				me(i+2,3,1,0,function(a) if upsh_gradblue then upsh_gradblue:diffusealpha(a) end end,'len',outSine)
			end
			for i = 212,223 do			
				me(i,1,22,20,function(a) if upsh_tile1 then upsh_tile1:zoom(a) end end,'len',outExpo)
				me(i,2,1,.75,function(a) if upsh_arrow then upsh_arrow:zoom(a) upsh_arrow2:zoom(a) end end,'len',outExpo)
			end
			for pn = 1,2 do
				me(196,2,0,0,'rotationx','len',linear,pn)
				me(196,2,0,0,'rotationy','len',linear,pn)
				me(196,2,0,0,'movex','len',linear,pn)
			end
			m(195,195.9,'*-1 hidenoteflashes','end')
			m(196,197,'*-1 no hidenoteflashes','end')
			
			me(196,2,0,100,'zoomy','len',outExpo)
			me(196,2,50,100,'zoomx','len',outExpo)
			me(196,1,0,0,'dark','len',linear)
			me(196,1,0,0,'stealth','len',linear)
			
			mm(196,function()
				for pn = 1,2 do
					local d = math.abs(pn-3)%2
					local a = Plr(pn)
					if a then
						a:x(scx*(d+0.5))
					end
				end
			end,true)
			
			m(196,220,'*-1 -200 movez, *-1 500% bumpyperiod','end')
			
			hidecol(196,2,{0,1,2,3},1,1)
			
			for i = 196,212,8 do --how do i write context switches .
				me(i,6,-200,300,'movez','len',inOutCirc,2)
				hideease(i+2,2,{0,1,2,3},1,inOutCubic,2,2)
				hideease(i+2,2,{0,1,2,3},0,inOutCubic,nil,1)
				me(i+2,2,0,800,'drunk','len',inBack,2,nil,2)
				me(i+2,2,0,-1000,'bumpy','len',inBack,2,nil,2)
				me(i+2,2,0,500,'tipsy','len',inBack,2,nil,2)
				me(i+2,2,0,50,'orient','len',inSine,2)
				me(i+2,3,0,600,'confusionzoffset','len',inQuad,2)
				
				me(i+6,3,2000,0,'drunk','len',inOutBack,2,nil,2)
				me(i+6,3,-500,0,'bumpy','len',inOutBack,2,nil,2)
				me(i+6,3,200,0,'tipsy','len',inOutBack,2,nil,2)
				me(i+6,3,-50,0,'orient','len',inOutSine,2)
				me(i+6,3,-500,0,'confusionzoffset','len',outCubic,2)
				
				me(i+4,6,-200,300,'movez','len',inOutCirc,1)
				hideease(i+6,2,{0,1,2,3},1,inOutCubic,2,1)
				hideease(i+6,2,{0,1,2,3},0,inOutCubic,nil,2)
				me(i+6,2,0,-800,'drunk','len',inBack,1,nil,2)
				me(i+6,2,0,-1000,'bumpy','len',inBack,1,nil,2)
				me(i+6,2,0,-500,'tipsy','len',inBack,1,nil,2)
				me(i+6,2,0,-20,'orient','len',inSine,1)
				me(i+6,3,0,-600,'confusionzoffset','len',inQuad,1)
				
				me(i+2,3,-2000,0,'drunk','len',inOutBack,1,nil,2)
				me(i+2,3,-500,0,'bumpy','len',inOutBack,1,nil,2)
				me(i+2,3,-200,0,'tipsy','len',inOutBack,1,nil,2)
				me(i+2,3,20,0,'orient','len',inOutSine,1)
				me(i+2,3,500,0,'confusionzoffset','len',outCubic,1)
			end
			
			local mult7 = 1 --ARE YOU DONE
			for i = 196,223 do				
				mb(i,1,0,10*mult7,'rotationx',outCubic,inExpo)
				mb(i,1,-200,0,'tinyx',outCubic,inCubic)
				mb(i,1,0,30*mult7,'invert',outCubic,inCubic)
				if i >= 212 then --didn't want to make another variable, fuck you					
					me(i,1,-40*mult7,0,'rotationy','len',outCirc)
				end
				mult7 = -mult7
			end
			
			for i = 212,223 do			
				me(i,1,-7000,0,'tinyz','len',outCirc)
			end
			me(222,4,9999,9999,'movex','len',linear,1)
			me(226,2,0,0,'movex','len',linear,1)
			m(222,6,'*-1 no drunk,*-1 no bumpy,*-1 no tipsy,*-1 no orient,*-1 no confusionzoffset','len',1)
			
			me(224,2,scy,scy+600,function(a) for pn = 1,2 do if Plr(pn) then Plr(pn):y(a) end end end,'len',inExpo)
			me(226,2,scy-600,scy,function(a) for pn = 1,2 do if Plr(pn) then Plr(pn):y(a) end end end,'len',outExpo)
			me(224,2,-0.2,0,function(a) if upsh_tile1 then upsh_tile1:texcoordvelocity(0,a,0) end end,'len',inOutExpo)
			me(226,2,0,0.2,function(a) if upsh_tile1 then upsh_tile1:texcoordvelocity(0,a,0) end end,'len',inOutExpo)
			
			me(226,2,scy-600,scy,function(a) for pn = 1,2 do if upsh_proxyshit then 
				_G['upsh_prox'..pn..'a']:y(a)
				_G['upsh_prox'..pn..'b']:y(a)
				_G['upsh_prox'..pn..'c']:y(a) 
			end end end,'len',outExpo)
			
			--COPY PASTING KAYPOOMA CODE :agony: :agony: :agony: :agony: :agony: :agony: :agony: :agony: :agony: 			
			m(226,292,'*-1 -98 drawsizeback, *-1 80 orient, *-1 100 drawsize','end')
			mm(228,function() if upsh_arrow2 then upsh_arrow2:y(scy) end end,true)
			
			local mult8 = -1 --FUCK OFF
			for i,v in ipairs({228,236,244,260,268,276}) do
				if mult8 == 1 then
					me(v,2,-270,270,function(a) if upsh_arrow then upsh_arrow:rotationz(a) end end,'len',outExpo)
					me(v,2,-270,270,function(a) if upsh_arrow then upsh_arrow2:rotationz(a) end end,'len',outExpo)
				else
					me(v,2,270,-270,function(a) if upsh_arrow then upsh_arrow:rotationz(a) end end,'len',outExpo)
					me(v,2,270,-270,function(a) if upsh_arrow then upsh_arrow2:rotationz(a) end end,'len',outExpo)
				end
				mult8 = -mult8
			end
			
			local mult9 = -1 --Nope
			for i = 228,283 do			
				me(i,2,1,.75,function(a) if upsh_arrow then upsh_arrow:zoom(a) upsh_arrow2:zoom(a) end end,'len',outExpo)
				
				if i ~= 228 and i ~= 236 and i ~= 244 and i ~= 260 and i ~= 268 and i ~= 276 then
					if mult9 == 1 then					
						me(i,1,scx+600,scx,function(a) if upsh_arrow then upsh_arrow:x(a) end end,'len',outSine)
						me(i,1,scx,scx-600,function(a) if upsh_arrow2 then upsh_arrow2:x(a) end end,'len',outSine)
					else
						me(i,1,scx-600,scx,function(a) if upsh_arrow2 then upsh_arrow2:x(a) end end,'len',outSine)
						me(i,1,scx,scx+600,function(a) if upsh_arrow then upsh_arrow:x(a) end end,'len',outSine)
					end
				end
				if i == 228 or i == 236 or i == 244 or i == 260 or i == 268 or i == 276 then mult9 = -mult9 end
			end
			
			local upsh_acc = 0
			local upsh_rot = 0
			me(228,230,0,5,function(a) upsh_rot = a end, 'end',outCubic)
			mpf(228,290,function(beat,deltatime)
				GAMESTATE:ApplyModifiers('*-1 '.. modulo(upsh_acc*sw, sw) ..' x')				
				
				GAMESTATE:ApplyModifiers('*-1 '.. upsh_rot*math.sin(beat/2) ..' rotationx')
				GAMESTATE:ApplyModifiers('*-1 '.. upsh_rot*math.sin(beat/4) ..' rotationz')
				GAMESTATE:ApplyModifiers('*-1 '.. upsh_rot*math.cos(beat/2) ..' rotationy')
			end)
			mm(226,function()
				if upsh_proxyshit then --in order of screen placement, left to right
					upsh_prox1c:x(scx*-1.5)
					upsh_prox2b:x(scx*-0.5)
					upsh_prox1a:x(scx*0.5)
					upsh_prox2a:x(scx*1.5)
					upsh_prox1b:x(scx*2.5)
					upsh_prox2c:x(scx*3.5)
					
					for pn = 1,2 do
						_G['upsh_prox'..pn..'a']:hidden(0)
						_G['upsh_prox'..pn..'b']:hidden(0)
						_G['upsh_prox'..pn..'c']:hidden(0)
						if Plr(pn) then
							Plr(pn):hidden(1)
						end
					end
				end
			end,true)
			
			if upsh_slumpage == true then
				me(228,8,0,-5,function(a) upsh_acc = a end,'len',inOutCubic) --pre nerf
				me(236,8,0,5,function(a) upsh_acc = a end,'len',inOutCubic)
				me(244,16,0,-12,function(a) upsh_acc = a end,'len',inOutQuad)
			else
				me(228,8,0,-4,function(a) upsh_acc = a end,'len',inOutCubic)
				me(236,8,0,4,function(a) upsh_acc = a end,'len',inOutCubic)
				me(244,16,0,-8,function(a) upsh_acc = a end,'len',inOutQuad)
			end
			
			mb(228,8,0,500,'parabolax',inCubic,outCubic)
			me(228,4,0,2,function(a) if upsh_tile1 then upsh_tile1:texcoordvelocity(a,0.2,0) end end,'len',inCubic)
			me(232,4,2,0,function(a) if upsh_tile1 then upsh_tile1:texcoordvelocity(a,0.2,0) end end,'len',outCubic)
			me(228,1,0,1,function(a) if upsh_gradorange then upsh_gradorange:diffusealpha(a) end end,'len',outCubic)
			
			mb(236,8,0,-500,'parabolax',inCubic,outCubic)
			me(236,4,0,-2,function(a) if upsh_tile1 then upsh_tile1:texcoordvelocity(a,0.2,0) end end,'len',inCubic)
			me(240,4,-2,0,function(a) if upsh_tile1 then upsh_tile1:texcoordvelocity(a,0.2,0) end end,'len',outCubic)
			me(236,1,0,1,function(a) if upsh_gradorange then upsh_gradblue:diffusealpha(a) end end,'len',outCubic)
			me(236,1,1,0,function(a) if upsh_gradorange then upsh_gradorange:diffusealpha(a) end end,'len',outCubic)
			
			mb(244,16,0,500,'parabolax',inQuad,outQuad)
			me(244,8,0,4,function(a) if upsh_tile1 then upsh_tile1:texcoordvelocity(a,0.2,0) end end,'len',inCubic)
			me(252,8,4,0,function(a) if upsh_tile1 then upsh_tile1:texcoordvelocity(a,0.2,0) end end,'len',outCubic)
			me(244,1,1,0,function(a) if upsh_gradorange then upsh_gradblue:diffusealpha(a) end end,'len',outCubic)
			me(244,1,0,1,function(a) if upsh_gradorange then upsh_gradorange:diffusealpha(a) end end,'len',outCubic)
			
			function upsh_proxyvibro(beat,magnitude) --LOAM
				me(beat,2,magnitude,0,function(a)
					for pn = 1,2 do
						for i,v in ipairs({'a','b','c'}) do
							local v = v
							if upsh_proxyshit then
								_G['upsh_prox'..pn..''..v]:vibrate(0)
								_G['upsh_prox'..pn..''..v]:effectmagnitude(a,a/2,0)
							end
						end
					end
				end,'len',outSine)
			end
			
			for i,v in ipairs({228,236,244,254.5,260,268,276}) do
				if v == 254.5 then
					upsh_proxyvibro(v,30)
				else
					upsh_proxyvibro(v,40)
				end
			end
			
			for i = 228,258,2 do
				me(i,1,0,100,'invert','len',outExpo)
				me(i,1,-500,0,'tinyx','len',outExpo)
				me(i,1,100,0,'tipsy','len',outExpo)
				me(i+1,1,100,0,'invert','len',outExpo)
				me(i+1,1,-500,0,'tinyx','len',outExpo)
				me(i+1,1,-100,0,'tipsy','len',outExpo)
			end
			
			m(260,292,'*-1 700 bumpyperiod','end')
			me(260,261,0,99.9,'reverse','end',outExpo,nil,284)
			me(284,1,99.9,0,'reverse','len',outExpo)
			me(260,261,0,-300,'bumpy','end',outExpo,nil,290)
			me(260,261,100,0,'dizzyholds','end',outExpo,nil,284) --the ONLY time that i would need to turn off dizzyholds
			me(260,261,0,math.pi*80,'confusionzoffset','end',outExpo,nil,284)
			me(284,1,math.pi*80,0,'confusionzoffset','len',outExpo)
			
			if upsh_slumpage == true then
				me(260,8,0,5,function(a) upsh_acc = a end,'len',inOutCubic)
				me(268,8,0,-5,function(a) upsh_acc = a end,'len',inOutCubic)
				me(276,16,0,12,function(a) upsh_acc = a end,'len',inOutQuad)
			else
				me(260,8,0,4,function(a) upsh_acc = a end,'len',inOutCubic)
				me(268,8,0,-4,function(a) upsh_acc = a end,'len',inOutCubic)
				me(276,16,0,8,function(a) upsh_acc = a end,'len',inOutQuad)
			end
			
			mb(260,8,0,-500,'parabolax',inCubic,outCubic)
			me(260,4,0,-2,function(a) if upsh_tile1 then upsh_tile1:texcoordvelocity(a,0.2,0) end end,'len',inCubic)
			me(264,4,-2,0,function(a) if upsh_tile1 then upsh_tile1:texcoordvelocity(a,0.2,0) end end,'len',outCubic)
			me(260,1,1,0,function(a) if upsh_gradorange then upsh_gradorange:diffusealpha(a) end end,'len',outCubic)
			me(260,1,0,1,function(a) if upsh_gradorange then upsh_gradblue:diffusealpha(a) end end,'len',outCubic)
			
			mb(268,8,0,500,'parabolax',inCubic,outCubic)
			me(268,4,0,2,function(a) if upsh_tile1 then upsh_tile1:texcoordvelocity(a,0.2,0) end end,'len',inCubic)
			me(272,4,2,0,function(a) if upsh_tile1 then upsh_tile1:texcoordvelocity(a,0.2,0) end end,'len',outCubic)
			me(268,1,1,0,function(a) if upsh_gradorange then upsh_gradblue:diffusealpha(a) end end,'len',outCubic)
			me(268,1,0,1,function(a) if upsh_gradorange then upsh_gradorange:diffusealpha(a) end end,'len',outCubic)
			
			mb(276,16,0,-500,'parabolax',inQuad,outQuad)
			me(276,8,0,-4,function(a) if upsh_tile1 then upsh_tile1:texcoordvelocity(a,0.2,0) end end,'len',inCubic)
			me(286,8,-4,0,function(a) if upsh_tile1 then upsh_tile1:texcoordvelocity(a,0.2,0) end end,'len',outCubic)
			me(276,1,0,1,function(a) if upsh_gradorange then upsh_gradblue:diffusealpha(a) end end,'len',outCubic)
			me(276,1,1,0,function(a) if upsh_gradorange then upsh_gradorange:diffusealpha(a) end end,'len',outCubic)
			
			for i = 260,282,2 do
				me(i,1,0,100,'invert','len',outExpo)
				me(i,1,-500,0,'tinyx','len',outExpo)
				me(i,1,200,0,'tipsy','len',outExpo)
				me(i+1,1,100,0,'invert','len',outExpo)
				me(i+1,1,-500,0,'tinyx','len',outExpo)
				me(i+1,1,-200,0,'tipsy','len',outExpo)
			end
			
			me(284,8,360*10,0,function(a) if upsh_arrow then upsh_arrow:rotationy(a) upsh_arrow2:rotationy(a) end end,'len',outCubic)
			me(284,8,1.5,0.75,function(a) if upsh_arrow then upsh_arrow:zoom(a) upsh_arrow2:zoom(a) end end,'len',inOutSine)
			me(284,3.5,1,0,function(a) if upsh_gradorange then upsh_gradblue:diffusealpha(a) end end,'len',outCubic)
			for i = 288,291 do
				for c = 0,3 do
					me(i+c/4,1,100,0,'arrowpath'..c,'len',outCubic)
					me(i+c/4,1,-400,0,'tinyy'..c,'len',outCubic)
					me(i+c/4,1,-300,0,'tinyy'..c,'len',outCubic)
				end
			end
			
			--Wead
			me(288,2,scy,scy+700,function(a) for pn = 1,2 do if upsh_proxyshit then 
				_G['upsh_prox'..pn..'a']:y(a)
				_G['upsh_prox'..pn..'b']:y(a)
				_G['upsh_prox'..pn..'c']:y(a) 
			end end end,'len',inExpo)
			me(288,2,scy,scy+600,function(a) if upsh_arrow then upsh_arrow:y(a) upsh_arrow2:y(a) end end,'len',inExpo)
			mm(290,function()
				for pn = 1,2 do
					_G['upsh_prox'..pn..'a']:hidden(1)
					_G['upsh_prox'..pn..'b']:hidden(1)
					_G['upsh_prox'..pn..'c']:hidden(1)
				end
			end,true)
			mm(290,function() for pn = 1,2 do if Plr(pn) then Plr(pn):hidden(0) Plr(1):x(scx*0.5) Plr(2):x(scx*1.5) end end end,true)
			m(290,1,'*-1 0 x','len')
			me(290,2,scy-600,scy,function(a) for pn = 1,2 do if Plr(pn) then Plr(pn):y(a) end end end,'len',outExpo)
			me(290,2,-300,0,'bumpy','len',outCubic)
			me(290,292,0,250,'parabolaz','end',outCubic,nil,340)
			m(292,338,'*-1 100 beat','end')
			me(292,1,-300,0,'tiny','len',outQuad)
			
			local multfuck = 1 --i lost track
			for i = 292,339 do
				mb(i,1,0,-30,'movey',outCubic,inCubic)
				me(i,1,0,-50,'brake','len',inCubic)
				mb(i,1,0,12*multfuck,'dizzy',outCubic,inCubic)
				mb(i,1,0,-150*multfuck,'parabolax',outCubic,inCubic)
				mb(i,1,0,50*multfuck,'tipsy',outCubic,inCubic)
				mb(i,1,0,20*multfuck,'invert',outCubic,inCubic)
				me(i,1,-100,0,'tiny','len',outQuad)
				
				me(i,1,20.5,20,function(a) if upsh_tile1 then upsh_tile1:zoom(a) end end,'len',outCubic)
				
				multfuck = -multfuck
			end
			for i = 292,336,4 do
				for c = 0,3 do
					me(i+c,2,50,0,'arrowpath'..c,'len',outCubic)
				end
			end
			
			if upsh_slumpage == true then
				for i = 292,338,2 do
					me(i,1,0,100,'flip','len',outExpo)
					me(i+1,1,100,0,'flip','len',outExpo)
				end
			end
			
			for i,v in ipairs(WEED) do
				me(v[1],2,1,0,function(a) if upsh_gradorange then upsh_gradorange:diffusealpha(a) end end,'len',outSine)
				me(v[1]+1,2,1,0,function(a) if upsh_gradblue then upsh_gradblue:diffusealpha(a) end end,'len',outSine)
				
				me(v[1],1,140,100,'zoomx','len',outQuad)
				me(v[1],1,110,100,'zoomy','len',outQuad)
				
				me(v[1]+1,1,150,100,'zoomx','len',outQuad)
				me(v[1]+1,1,120,100,'zoomy','len',outQuad)
				
				me(v[1]-0.5,1,0,99.9,'reverse','len',inOutExpo)
				me(v[1]+.5,1,99.9,0,'reverse','len',inOutExpo)
				
				mb(v[1],1,0,-3000,'tinyz',outElastic,inExpo)
				mb(v[1]+1,1,0,-3000,'tinyz',outElastic,inExpo)
			end
			
			me(323.5,1,scx*0.5,scx,function(a) if Plr(1) then Plr(1):x(a) end end,'len',inOutBack)
			me(323.5,1,scx*1.5,scx,function(a) if Plr(2) then Plr(2):x(a) end end,'len',inOutBack)
			mm(324.5,function() for pn = 1,2 do if Plr(pn) then Plr(pn):x(scx) end end end,true)
			
			me(323,325,0,-50,'flip','end',inOutExpo,nil,339.5)
			me(323,325,0,50,'movex','end',inOutExpo,1,339.5)
			me(323,325,0,-50,'movex','end',inOutExpo,2,339.5)
			
			me(339.5,1,-50,0,'flip','len',inOutExpo)
			me(339.5,1,50,0,'movex','len',inOutExpo,1)
			me(339.5,1,-50,0,'movex','len',inOutExpo,2)
			
			mb(324,2,0,20,'rotationx',outExpo,inExpo)
			mb(326,2,0,-20,'rotationx',outExpo,inExpo)
			mb(332,2,0,-20,'rotationx',outExpo,inExpo)
			mb(334,2,0,20,'rotationx',outExpo,inExpo)
			
			local mult69 = 1 --AUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUGHHHHHHHHH
			for i,v in ipairs({324,325,326,327,332,333,334,335}) do
					mb(v,1,0,10*mult69,'rotationz',outCubic,inCubic)
				mult69 = -mult69
			end
			
			m(340,348,'*-1 700 bumpyperiod','end')
			me(340,8,0,-40,'rotationx','len',inSine,nil,4)
			for i = 340,346,2 do
				me(i,1,0,99.9,'reverse','len',outExpo)
				me(i,1,0,100,'flip','len',outExpo)
				mb(i,1,0,300,'bumpy',outExpo,inExpo)
				me(i+1,1,99.9,0,'reverse','len',outExpo)
				me(i+1,1,100,0,'flip','len',outExpo)
				mb(i+1,1,0,-300,'bumpy',outExpo,inExpo)
			end
			for i = 340,347 do
				mb(i,1,0,-1000,'tinyz',outElastic,inExpo)
				me(i,1,-300,0,'tinyx','len',outExpo)
				me(i,1,-150,0,'tinyy','len',outExpo)
				me(i,1,23,20,function(a) if upsh_tile1 then upsh_tile1:zoom(a) end end,'len',outCubic)
			end
			
			local mult420 = 1 --bro . homie. brother. he said the Funny Weed Number . your so fresh and hilarious . +1 comedy point to you good sir
			for i = 308,321 do
				mb(i,1,0,5*mult420,'rotationz',outCubic,inCubic)
				mb(i,1,0,5*mult420,'rotationy',outCubic,inCubic)
				mult420 = -mult420
			end
			
			me(348,4,-360*3,0,'rotationz','len',inCubic)
			me(348,4,628*3,0,'confusionzoffset','len',inCubic)
			me(348,4,0,1,'bumpy','len',outCubic)
			me(348,4,0,1,'tornado','len',outCubic,1)
			me(348,4,0,-1,'tornado','len',outCubic,2)
			me(348,4,0,-500,'tiny','len',outCubic)
			me(348,4,0,200,'tinyholds','len',outCubic)
			me(348,4,0,-20000,'gayholds','len',outCubic)
			
			me(352,1,-40,0,'rotationx','len',outExpo)
			me(352,1,-400,0,'tiny','len',outExpo)
			
			--the
			me(348,4,1,0,function(a) if upsh_tile1 then upsh_tile1:diffusealpha(a) end end,'len',inOutCubic)
			
			me(352,0.75,0,180,'rotationz','len',outCubic)
			me(352,0.75,0,-314,'confusionzoffset','len',outCubic)
			
			me(352.75,0.75,-180,0,'rotationz','len',outCubic)
			me(352.75,0.75,314,0,'confusionzoffset','len',outCubic)
			
			me(353.5,0.75,0,180+45,'rotationz','len',outCubic)
			me(353.5,0.75,0,-314-78.5,'confusionzoffset','len',outCubic)
			
			me(354.25,0.75,180+45,180+180+45,'rotationz','len',outCubic) --the fuck is a math
			me(354.25,0.75,-314-78.5,-314-314-78.5,'confusionzoffset','len',outCubic)
			
			me(355,0.75,45,180,'rotationz','len',outCubic)
			me(355,0.75,-78.5,-314,'confusionzoffset','len',outCubic)
			me(355,0.75,100,300,'zoomx','len',outCubic,nil,99)
			me(355,0.75,100,0,'zoomy','len',outCubic,nil,99)
			
			m(348,400,'*-1 disablemines, *-1 hidemines','end')
---------------------------------------------------------------------------------------
----------------------Sort the actions table-------------------------------------------
---------------------------------------------------------------------------------------
			
			function modtable_compare(a,b)
				return a[1] < b[1]
			end
			
			if table.getn(mod_actions) > 1 then
				table.sort(mod_actions, modtable_compare)
			end
			
			self:queuecommand('Update');
			
		end"
		
		UpdateCommand="%function(self)
			local beat = GAMESTATE:GetSongBeat()
			
			if beat>=0 and not checked then
					local ThingsToGrab = {'BPMDisplay','LifeFrame','ScoreFrame','Lyrics','SongBackground','SongForeground','Overlay','Underlay'}
					local ThingsToHide = {'BPMDisplay','LifeFrame','ScoreFrame','Overlay','Underlay'}
					for pn=1,8 do
						_G['P'..pn] = SCREENMAN:GetTopScreen():GetChild('PlayerP'..pn) or nil;
						if _G['P'..pn] then
							table.insert(mod_plr, _G['P'..pn])
							_G['jud'..pn]=_G['P'..pn]:GetChild('Judgment');
							_G['com'..pn]=_G['P'..pn]:GetChild('Combo');
							_G['jud'..pn]:hidden(1)
							_G['com'..pn]:hidden(1)
						end
						table.insert(ThingsToGrab,'LifeP'..pn); table.insert(ThingsToGrab,'ScoreP'..pn);
						table.insert(ThingsToHide,'LifeP'..pn); table.insert(ThingsToHide,'ScoreP'..pn);
					end	
					for i,v in ipairs(ThingsToGrab) do _G[v] = SCREENMAN:GetTopScreen():GetChild(v) or nil end	
					for i,v in ipairs(ThingsToHide) do if _G[v] then _G[v]:hidden(1) end end
				checked = true;
			end
			mod_curtime = GAMESTATE:GetSongTime()
			mod_lasttime = 0
			local deltatime = mod_curtime - mod_lasttime
			local deltatime = mod_curtime - mod_lasttime
			
			if P1 then P1:NoClearSplines(true) end
			if P2 then P2:NoClearSplines(true) end
			
			--p3/4/etc disabling judgment/combo stuff
			if P3 and P4 then
				for pn=3,8 do
					_G['P'..pn] = SCREENMAN:GetTopScreen():GetChild('PlayerP'..pn) or nil;
					if _G['P'..pn] then
						table.insert(mod_plr, _G['P'..pn])
						_G['jud'..pn]=_G['P'..pn]:GetChild('Judgment');
						_G['com'..pn]=_G['P'..pn]:GetChild('Combo');
						_G['jud'..pn]:hidden(1)
						_G['com'..pn]:hidden(1)
					end
				end
			end
			
---------------------------------------------------------------------------------------
----------------------Begin table handlers---------------------------------------------
---------------------------------------------------------------------------------------
			
			disable = false;
			if disable ~= true and checked then
				
				-----------------------
				-- Player mod resets --
				-----------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i=1,8 do
						GAMESTATE:ApplyModifiers('clearall',i)
						if _G['init_modsp'..i] then 
							GAMESTATE:ApplyModifiers(_G['init_modsp'..i],i)
						end
					end
				
				------------------------------------------------------------------------------
				-- custom mod reader by TaroNuke edited by WinDEU and re-stolen by TaroNuke --
				------------------------------------------------------------------------------
					for i,v in pairs(mods) do
						if v and table.getn(v) > 3 and v[1] and v[2] and v[3] and v[4] then
							if beat >=v[1] then
								if (v[4] == 'len' and beat <=v[1]+v[2]) or (v[4] == 'end' and beat <=v[2]) then
									if table.getn(v) == 5 then
										GAMESTATE:ApplyModifiers(v[3],v[5]);
									else
										GAMESTATE:ApplyModifiers(v[3]);
									end
								end
							end
						else
							v[1] = 0;
							v[2] = 0;
							v[3] = '';
							v[4] = 'error';
							SCREENMAN:SystemMessage('Bad mod in beat-based table (line '..i..')');
						end
					end
				
				-----------------------------------------------------------------------------------------------------
				-- WinDEU's time-based len/end version of the #swag custom mod reader #teamproofofconcept (c) 2015 --
				-----------------------------------------------------------------------------------------------------
					for i,v in pairs(mods2) do
						if v and table.getn(v) > 3 and v[1] and v[2] and v[3] and v[4] then
							if mod_time >=v[1] then
								if (v[4] == 'len' and mod_time <=v[1]+v[2]) or (v[4] == 'end' and mod_time <=v[2]) then
									if table.getn(v) == 5 then
										GAMESTATE:ApplyModifiers(v[3],v[5]);
									else
										GAMESTATE:ApplyModifiers(v[3]);
									end
								end
							end
						else
							v[1] = 0;
							v[2] = 0;
							v[3] = 'error';
							v[4] = 'error';
							SCREENMAN:SystemMessage('Bad mod in time-based table (line '..i..')');
						end
					end
				
				---------------------------------------
				-- Ease table (includes func_ease) --
				---------------------------------------
					for i,v in pairs(mods_ease) do
						if v and table.getn(v) > 6 and v[1] and v[2] and v[3] and v[4] and v[5] and v[6] and v[7] then
							if beat >=v[1] then
								if (v[6] == 'len' and beat <=v[1]+v[2]) or (v[6] == 'end' and beat <=v[2]) then
									local strength = v[7](beat - v[1], v[3], v[4] - v[3], v[6] == 'end' and v[2] - v[1] or v[2], v[10], v[11])
									if type(v[5]) == 'string' then
										local modstr = v[5] == 'xmod' and strength..'x' or (v[5] == 'cmod' and 'C'..strength or strength..' '..v[5])
										GAMESTATE:ApplyModifiers('*9999 '..modstr,v[8]);
									elseif type(v[5]) == 'function' then
										v[5](strength)
									end
								elseif (v[9] and ((v[6] == 'len' and beat <=v[1]+v[2]+v[9]) or (v[6] == 'end' and beat <=v[9]))) then
									if type(v[5]) == 'string' then
										local modstr = v[5] == 'xmod' and v[4]..'x' or (v[5] == 'cmod' and 'C'..v[4] or v[4]..' '..v[5])
										GAMESTATE:ApplyModifiers('*9999 '..modstr,v[8]);
									elseif type(v[5]) == 'function' then
										v[5](v[4])
									end
								end
							end
						else
							SCREENMAN:SystemMessage('Ease Error! (line '..i..' | beat: '.. v[1] .. ' | mod: '.. v[5] ..')');
						end
					end
				---------------------
				-- Perframe reader --
				---------------------
					if table.getn(mod_perframes)>0 then
						for i=1,table.getn(mod_perframes) do
							local a = mod_perframes[i]
							if beat > a[1] and beat < a[2] then
								a[3](beat,deltatime);
							end
						end
					end
				---------------------------------------
				-- Actions table --
				---------------------------------------
					while curaction<=table.getn(mod_actions) and GAMESTATE:GetSongBeat()>=mod_actions[curaction][1] do
						if mod_actions[curaction][3] or GAMESTATE:GetSongBeat() < mod_actions[curaction][1]+2 then
							if type(mod_actions[curaction][2]) == 'function' then
								mod_actions[curaction][2]()
							elseif type(mod_actions[curaction][2]) == 'string' then
								MESSAGEMAN:Broadcast(mod_actions[curaction][2]);
							end
						end
						curaction = curaction+1;
					end
				end				
			end
			
			mod_lasttime = mod_curtime
			--self:sleep(0.02);
			--self:queuecommand('Update');
			self:hidden(0);
			self:zoom(0);
			self:luaeffect('Update');

---------------------------------------------------------------------------------------
----------------------END DON'T TOUCH IT KIDDO-----------------------------------------
---------------------------------------------------------------------------------------
			
		end"
		
	/>
	
	<ZZLAER Type="ActorFrame" InitCommand="%function(self) judc = self end"><children>
	<LAER Type="ActorProxy" InitCommand="%function(self) jud1p = self end"
	GetProxyMessageCommand="%function(self) if P1 then self:SetTarget(P1:GetChild('Judgment')) end end"/>
	<LAER Type="ActorProxy" InitCommand="%function(self) jud2p = self end"
	GetProxyMessageCommand="%function(self) if P2 then self:SetTarget(P2:GetChild('Judgment')) end end"/>
	</children></ZZLAER>
	<ZZLAER Type="ActorFrame" InitCommand="%function(self) comc = self end"><children>
	<LAER Type="ActorProxy" InitCommand="%function(self) com1p = self end"
	GetProxyMessageCommand="%function(self) if P1 then self:SetTarget(P1:GetChild('Combo')) end end"/>
	<LAER Type="ActorProxy" InitCommand="%function(self) com2p = self end"
	GetProxyMessageCommand="%function(self) if P2 then self:SetTarget(P2:GetChild('Combo')) end end"/>
	</children></ZZLAER>
	
	<!-- HELP -->
	<ActorFrame OnCommand="%function(self) upsh_fgcock = self self:fov(40); self:SetDrawByZPosition(true); self:SetFarDist(9999); end"> <children>
		<Layer
			File="party.png"
			OnCommand="%function(self)
				upsh_text_0 = self
				self:x(scx)
				self:y(696969)
				self:diffuse(1,1,1,0)
				self:diffusealpha(0.7)
			end"
		/>
		<Layer
			File="all.png"
			OnCommand="%function(self)
				upsh_text_1 = self
				self:x(scx)
				self:y(696969)
				self:diffuse(1,1,1,0)
				self:diffusealpha(0.7)
			end"
		/>
		<Layer
			File="night.png"
			OnCommand="%function(self)
				upsh_text_2 = self
				self:x(scx)
				self:y(696969)
				self:diffuse(1,1,1,0)
				self:diffusealpha(0.7)
			end"
		/>
		<Layer
			File="then.png"
			OnCommand="%function(self)
				upsh_text_3 = self
				self:x(scx)
				self:y(696969)
				self:diffuse(1,1,1,0)
				self:diffusealpha(0.7)
			end"
		/>
		<Layer
			File="we.png"
			OnCommand="%function(self)
				upsh_text_4 = self
				self:x(scx)
				self:y(696969)
				self:diffuse(1,1,1,0)
				self:diffusealpha(0.7)
			end"
		/>
		<Layer
			File="day.png"
			OnCommand="%function(self)
				upsh_text_5 = self
				self:x(scx)
				self:y(696969)
				self:diffuse(1,1,1,0)
				self:diffusealpha(0.7)
			end"
		/>		
	</children> </ActorFrame>
	
	<!--proxies-->	
	<ActorFrame OnCommand="%function(self) upsh_proxyshit = self self:fov(40); self:SetFarDist(9999); end"><children>
        <ActorProxy OnCommand="%function(self) upsh_prox1a = self; self:hidden(1); self:sleep(0.1); self:queuecommand('ProxyInit') end"
        ProxyInitCommand="%function(self) P1 = SCREENMAN:GetTopScreen():GetChild('PlayerP1'); if P1 then self:SetTarget(P1:GetChild('NoteField')) end end"/>
        <ActorProxy OnCommand="%function(self) upsh_prox2a = self; self:hidden(1); self:sleep(0.1); self:queuecommand('ProxyInit') end"
        ProxyInitCommand="%function(self) P2 = SCREENMAN:GetTopScreen():GetChild('PlayerP2'); if P2 then self:SetTarget(P2:GetChild('NoteField')) end end"/>
        <ActorProxy OnCommand="%function(self) upsh_prox1b = self; self:hidden(1); self:sleep(0.1); self:queuecommand('ProxyInit') end"
        ProxyInitCommand="%function(self) P1 = SCREENMAN:GetTopScreen():GetChild('PlayerP1'); if P1 then self:SetTarget(P1:GetChild('NoteField')) end end"/>
        <ActorProxy OnCommand="%function(self) upsh_prox2b = self; self:hidden(1); self:sleep(0.1); self:queuecommand('ProxyInit') end"
        ProxyInitCommand="%function(self) P2 = SCREENMAN:GetTopScreen():GetChild('PlayerP2'); if P2 then self:SetTarget(P2:GetChild('NoteField')) end end"/>
        <ActorProxy OnCommand="%function(self) upsh_prox1c = self; self:hidden(1); self:sleep(0.1); self:queuecommand('ProxyInit') end"
        ProxyInitCommand="%function(self) P1 = SCREENMAN:GetTopScreen():GetChild('PlayerP1'); if P1 then self:SetTarget(P1:GetChild('NoteField')) end end"/>
        <ActorProxy OnCommand="%function(self) upsh_prox2c = self; self:hidden(1); self:sleep(0.1); self:queuecommand('ProxyInit') end"
        ProxyInitCommand="%function(self) P2 = SCREENMAN:GetTopScreen():GetChild('PlayerP2'); if P2 then self:SetTarget(P2:GetChild('NoteField')) end end"/>
    </children></ActorFrame>
	
	<!--This is for the time based mod reader-->
	<BitmapText
		Font="Common Normal"
		Text="test"
		OnCommand="x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;effectclock,music;playcommand,SetTime;hidden,1"
		SetTimeCommand="%function(self) self:settext(self:GetSecsIntoEffect()); mod_time = tonumber(self:GetText()); self:sleep(0.02); self:queuecommand('SetTime'); end"
	/>
	
</children></ActorFrame></children></ActorFrame>